// This file was generated by json2swift.

import Foundation

//
// MARK: - Data Model
//
public struct Move: Codable { // TODO: Rename this struct
    public let accuracy: String
    public let category: DamageCategory
    public let crit: Int
    public let description: String
    public let id: Int
    public let name: String
    public let power: Int?
    public let pp: Int
    public let priority: Int
    public let type: Type
    public let zEffect: String
	
	enum CodingKeys: String, CodingKey {
		case accuracy, category, crit, description, id, name = "move", power, pp, priority, type, zEffect = "z-effect"
	}
	
	public init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		accuracy = try container.decode(String.self, forKey: .accuracy)
		category = try container.decode(DamageCategory.self, forKey: .category)
		crit = try container.decode(Int.self, forKey: .crit)
		description = try container.decode(String.self, forKey: .description)
		id = try container.decode(Int.self, forKey: .id)
		name = try container.decode(String.self, forKey: .name)
		do {
			power = try container.decodeIfPresent(Int.self, forKey: .power)
		} catch DecodingError.typeMismatch {
			if let p = try container.decodeIfPresent(String.self, forKey: .power), p == "—" {
				power = nil
			} else {
				throw DecodingError.dataCorruptedError(forKey: .power, in: container, debugDescription: "Power was incorrect")
			}
		}
		pp = try container.decode(Int.self, forKey: .pp)
		priority = try container.decode(Int.self, forKey: .priority)
		type = try container.decode(Type.self, forKey: .type)
		zEffect = try container.decode(String.self, forKey: .zEffect)
	}
	
	public static func with(name: String) throws -> Move {
		return try Pokédex.decode(Move.self, fromPropertyListWithName: "move-\(name)")
	}
}
