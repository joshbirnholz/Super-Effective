// This file was generated by json2swift.

import Foundation

//
// MARK: - Data Model
//
public struct Move { // TODO: Rename this struct
    public let accuracy: String
    public let category: DamageCategory
    public let crit: Int
    public let description: String
    public let id: Int
    public let name: String
    public let power: Int?
    public let pp: Int
    public let priority: Int
    public let type: Type
    public let zEffect: String
    public init(accuracy: String, category: DamageCategory, crit: Int, description: String, id: Int, name: String, power: Int?, pp: Int, priority: Int, type: Type, zEffect: String) {
        self.accuracy = accuracy
        self.category = category
        self.crit = crit
        self.description = description
        self.id = id
        self.name = name
        self.power = power
        self.pp = pp
        self.priority = priority
        self.type = type
        self.zEffect = zEffect
    }
    public init?(json: [String: Any]) {
        guard let accuracy = json["accuracy"] as? String else { return nil }
        guard let categoryString = json["category"] as? String else { return nil }
        guard let crit = json["crit"] as? Int else { return nil }
        guard let description = json["description"] as? String else { return nil }
        guard let id = json["id"] as? Int else { return nil }
        guard let move = json["move"] as? String else { return nil }
        guard let pp = json["pp"] as? Int else { return nil }
        guard let priority = json["priority"] as? Int else { return nil }
        guard let typeString = json["type"] as? String else { return nil }
        guard let zEffect = json["z-effect"] as? String else { return nil }
		guard let type = Type(rawValue: typeString.lowercased()) else { return nil }
		guard let category = DamageCategory(rawValue: categoryString.lowercased()) else { return nil }
			
        let power = json["power"] as? Int
        self.init(accuracy: accuracy, category: category, crit: crit, description: description, id: id, name: move, power: power, pp: pp, priority: priority, type: type, zEffect: zEffect)
    }
	
	public static func with(name: String) -> Move? {
		guard let moveURL = bundle?.url(forResource: "move-\(name)", withExtension: "plist"),
			let dict = [String: Any].contents(of: moveURL) else {
				return nil
		}
		return Move(json: dict)
	}
}
