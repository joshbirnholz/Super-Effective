// This file was generated by json2swift.

import Foundation

public struct Evolution: Hashable, Equatable {
	
	public static func == (lhs: Evolution, rhs: Evolution) -> Bool {
		return lhs.evolutionID == rhs.evolutionID
	}
	
	public var hashValue: Int {
		return evolutionID
	}
	
	public enum Trigger: String {
		case levelUp, trade, item
	}
	
	public enum Modifier: Double {
		case superEffective = 2.0
		case notVerEffective = 0.5
	}
	
	public let evolutionID: Int
	public let evolvedSpeciesID: Int
	public let gender: String?
	public let heldItem: String?
	public let inVersion: String?
	public let knownMove: String?
	public let knownMoveType: String?
	public let location: String?
	public let minimumAffection: Int?
	public let minimumHappiness: Int?
	public let minimumLevel: Int?
	public let originalSpeciesID: Int
	public let partySpecies: String?
	public let partyType: String?
	public let relativePhysicalStats: Int?
	public let timeOfDay: String?
	public let tradeSpecies: String?
	public let trigger: Trigger
	public let triggerItem: String?
	public var specialCondition: String?
	
	public init(evolutionID: Int, evolvedSpeciesID: Int, gender: String?, heldItem: String?, inVersion: String?, knownMove: String?, knownMoveType: String?, location: String?, minimumAffection: Int?, minimumHappiness: Int?, minimumLevel: Int?, originalSpeciesID: Int, partySpecies: String?, partyType: String?, relativePhysicalStats: Int?, timeOfDay: String?, tradeSpecies: String?, trigger: Trigger, triggerItem: String?, specialCondition: String?) {
		self.evolutionID = evolutionID
		self.evolvedSpeciesID = evolvedSpeciesID
		self.gender = gender
		self.heldItem = heldItem
		self.inVersion = inVersion
		self.knownMove = knownMove
		self.knownMoveType = knownMoveType
		self.location = location
		self.minimumAffection = minimumAffection
		self.minimumHappiness = minimumHappiness
		self.minimumLevel = minimumLevel
		self.originalSpeciesID = originalSpeciesID
		self.partySpecies = partySpecies
		self.partyType = partyType
		self.relativePhysicalStats = relativePhysicalStats
		self.timeOfDay = timeOfDay
		self.tradeSpecies = tradeSpecies
		self.trigger = trigger
		self.triggerItem = triggerItem
		self.specialCondition = specialCondition
	}
	
	public init?(json: [String: Any]) {
		guard let evolutionID = json["evolution ID"] as? Int else { return nil }
		guard let evolvedSpeciesID = json["evolved species ID"] as? Int else { return nil }
		guard let originalSpeciesID = json["original species ID"] as? Int else { return nil }
		guard let triggerString = json["trigger"] as? String else { return nil }
		let specialCondition = json["special condition"] as? String
		let gender = json["gender"] as? String
		let heldItem = json["held item"] as? String
		let inVersion = json["in version"] as? String
		let knownMove = json["known move"] as? String
		let knownMoveType = json["known move type"] as? String
		let location = json["location"] as? String
		let minimumAffection = json["minimum affection"] as? Int
		let minimumHappiness = json["minimum happiness"] as? Int
		let minimumLevel = json["minimum level"] as? Int
		let partySpecies = json["party species"] as? String
		let partyType = json["party type"] as? String
		let relativePhysicalStats = json["relative physical stats"] as? Int
		let timeOfDay = json["time of day"] as? String
		let tradeSpecies = json["trade species"] as? String
		let triggerItem = json["trigger item"] as? String
		
		guard let trigger: Trigger = {
			
			switch triggerString.lowercased() {
			case "level up": return .levelUp
			case "item": return .item
			case "trade": return .trade
			default: return nil
			}
			
			}() else { print("Invalid trigger"); return nil }
		
		self.init(evolutionID: evolutionID,
		          evolvedSpeciesID: evolvedSpeciesID,
		          gender: gender,
		          heldItem: heldItem,
		          inVersion: inVersion,
		          knownMove: knownMove,
		          knownMoveType: knownMoveType,
		          location: location,
		          minimumAffection: minimumAffection,
		          minimumHappiness: minimumHappiness,
		          minimumLevel: minimumLevel,
		          originalSpeciesID: originalSpeciesID,
		          partySpecies: partySpecies,
		          partyType: partyType,
		          relativePhysicalStats: relativePhysicalStats,
		          timeOfDay: timeOfDay,
		          tradeSpecies: tradeSpecies,
		          trigger: trigger,
		          triggerItem: triggerItem,
		          specialCondition: specialCondition)
	}
	
	public var conditions: String {
		var conditions = [String]()
		
		switch trigger {
		case .levelUp:
			if let minimumLevel = minimumLevel {
				conditions.append("at level \(minimumLevel)")
			} else {
				conditions.append("when leveled up")
			}
		case .trade:
			conditions.append("when traded")
		case .item where triggerItem != nil:
			conditions.append("using a \(triggerItem!)")
		default:
			conditions.append("using an item")
		}
		if let tradeSpecies = tradeSpecies {
			conditions.append("for a \(tradeSpecies)")
		}
		if let timeOfDay = timeOfDay {
			if timeOfDay == "day" {
				conditions.append("during the day")
			} else if timeOfDay == "night" {
				conditions.append("at night")
			}
		}
		if let _ = minimumAffection {
			conditions.append("with high affection")
		}
		if let heldItem = heldItem {
			conditions.append("while holding \(heldItem)")
		}
		if let version = inVersion {
			conditions.append("in \(version)")
		}
		if let knownMove = knownMove {
			conditions.append("while knowing \(knownMove)")
		}
		if let knownMoveType = knownMoveType {
			conditions.append("while knowing a \(knownMoveType)-type Move")
		}
		if let location = location {
			conditions.append("at \(location)")
		}
		if let _ = minimumHappiness {
			conditions.append("with high friendship")
		}
		if let partySpecies = partySpecies {
			conditions.append("with a \(partySpecies) in the party")
		}
		if let partyType = partyType {
			conditions.append("with a \(partyType)-type PokÃ©mon in the party")
		}
		if let relativePhysicalStats = relativePhysicalStats {
			switch relativePhysicalStats {
			case -1: conditions.append("if its Attack is higher than its Defense")
			case 0: conditions.append("if its Attack and Defense are the same")
			case 1: conditions.append("if its Defense is higher than its Attack")
			default: break
			}
		}
		if let specialCondition = specialCondition {
			conditions.append(specialCondition)
		}
		if let gender = gender {
			conditions.append("(if \(gender))")
		}
		
		return conditions.joined(separator: " ")
	}
	
	public static func with(id: Int) -> Evolution? {
		guard let evolutionURL = bundle?.url(forResource: "evolution-\(id)", withExtension: "plist") else { return nil }
		if let evoDict = [String: Any].contents(of: evolutionURL) {
			return Evolution(json: evoDict)
		} else {
			return nil
		}
	}
}
