// This file was generated by json2swift.

import Foundation
import UIKit

//
// MARK: - Data Model
//

public struct Pokémon: Decodable, Hashable, Equatable {
	
	public let species: String
	public let ability1: String
	public let ability2: String
	public let abilityH: String
	public let attack: Int
	public let defense: Int
	public let dex1: String
	public let dex2: String
	public let eggGroup1: String
	public let eggGroup2: String
	public let forme: String
	public let height: String
	public let hp: Int
	public let id: Int
	public let ndex: Int
	public let percentFemale: Double?
	public let percentMale: Double?
	public let spattack: Int
	public let spdefense: Int
	public let name: String
	public let speed: Int
	public let total: Int
	public let type: TypeCombination
	public let weight: String
	public let preEvolutionID: Int?
	public let evolutionTree: [Evolution]
	public let altFormIDs: [Int]
	
	private enum PokémonCodingKeys: String, CodingKey {
		case species = "class", ability1, ability2, abilityH, attack, defense, dex1, dex2, eggGroup1 = "egg-group1", eggGroup2 = "egg-group2", forme, height, hp, id, ndex, spattack, spdefense, name = "species", speed, total, weight, type1, type2, altFormIDs = "altformIDs", percentFemale = "percent-female", percentMale = "percent-male", preEvolution, evolutionTreeIDs = "evolutionTree"
	}
	
	public init (from decoder: Decoder) throws {
		let values = try decoder.container(keyedBy: PokémonCodingKeys.self)
		species = try values.decode(String.self, forKey: .species)
		ability1 = try values.decode(String.self, forKey: .ability1)
		ability2 = try values.decode(String.self, forKey: .ability2)
		abilityH = try values.decode(String.self, forKey: .abilityH)
		attack = try values.decode(Int.self, forKey: .attack)
		defense = try values.decode(Int.self, forKey: .defense)
		dex1 = try values.decode(String.self, forKey: .dex1)
		dex2 = try values.decode(String.self, forKey: .dex2)
		eggGroup1 = try values.decode(String.self, forKey: .eggGroup1)
		eggGroup2 = try values.decode(String.self, forKey: .eggGroup2)
		forme = try values.decode(String.self, forKey: .forme)
		height = try values.decode(String.self, forKey: .height)
		hp = try values.decode(Int.self, forKey: .hp)
		id = try values.decode(Int.self, forKey: .id)
		ndex = try values.decode(Int.self, forKey: .ndex)
		percentFemale = try? values.decode(Double.self, forKey: .percentFemale)
		percentMale = try? values.decode(Double.self, forKey: .percentMale)
		spattack = try values.decode(Int.self, forKey: .spattack)
		spdefense = try values.decode(Int.self, forKey: .spdefense)
		name = try values.decode(String.self, forKey: .name)
		speed = try values.decode(Int.self, forKey: .speed)
		total = try values.decode(Int.self, forKey: .total)
		weight = try values.decode(String.self, forKey: .weight)
		altFormIDs = try values.decode([Int].self, forKey: .altFormIDs)
		preEvolutionID = try? values.decode(Int.self, forKey: .preEvolution)
		
		let type1 = try values.decode(Type.self, forKey: .type1)
		let type2 = try? values.decode(Type.self, forKey: .type2)
		
		type = TypeCombination(type1, type2)
		
		evolutionTree = try values.decode([Int].self, forKey: .evolutionTreeIDs).compactMap {
			Evolution.with(id: $0)
		}
		
	}
	
	public var formName: String {
		return forme.replacingOccurrences(of: name, with: "").replacingOccurrences(of: "(", with: "").replacingOccurrences(of: ")", with: "").replacingOccurrences(of: "Forme", with: "").replacingOccurrences(of: "Form", with: "") .trimmingCharacters(in: .whitespaces).replacingOccurrences(of: "  ", with: " ")
	}
	
	public var bulbapediaURL: URL {
		let str = "https://bulbapedia.bulbagarden.net/wiki/\(name)_(Pokémon)".addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed)!
		return URL(string: str)!
	}
	
	public var icon: UIImage? {
		if id <= 801 {
			return UIImage(named: "\(ndex).png")
		}
		
		let formName = "\(self.formName.lowercased().replacingOccurrences(of: "forme", with: "").replacingOccurrences(of: "form", with: "").trimmingCharacters(in: .whitespacesAndNewlines).replacingOccurrences(of: " ", with: "-").replacingOccurrences(of: ":", with: "-").replacingOccurrences(of: "--", with: "-"))".replacingOccurrences(of: "é", with: "e")
		let ndexString = String(ndex)
		let iconName = (formName.isEmpty ? ndexString : "\(ndexString)-\(formName)") + ".png"
		return UIImage(named: iconName)
	}
	
	public var hashValue: Int {
		return id
	}
	
	public static func == (lhs: Pokémon, rhs: Pokémon) -> Bool {
		return lhs.id == rhs.id
	}
	
	public static func with(id: Int) -> Pokémon? {
		return try? decode(Pokémon.self, fromPropertyListWithName: "pokemon-\(id)")
	}
	
}

public extension Pokémon {
	
	public var userActivity: NSUserActivity {
		let activity = NSUserActivity(activityType: "com.josh.birnholz.SuperEffective.ViewPokemon")
		activity.webpageURL = bulbapediaURL
		activity.userInfo = [
			"id": id,
			"name": name,
			"forme": forme
		]
		if #available(iOS 12.0, watchOSApplicationExtension 5.0, *) {
			activity.isEligibleForPrediction = true
		}
		return activity
	}
	
}
