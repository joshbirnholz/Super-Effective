// This file was generated by json2swift.

import Foundation
import UIKit

//
// MARK: - Data Model
//

public struct Pokémon: Hashable, Equatable {
	
	public let species: String
	public let ability1: String
	public let ability2: String
	public let abilityH: String
	public let attack: Int
	public let defense: Int
	public let dex1: String
	public let dex2: String
	public let eggGroup1: String
	public let eggGroup2: String
	public let forme: String
	public let height: String
	public let hp: Int
	public let id: Int
	public let ndex: Int
	public let percentFemale: Double?
	public let percentMale: Double?
	public let spattack: Int
	public let spdefense: Int
	public let name: String
	public let speed: Int
	public let total: Int
	public let type: TypeCombination
	public let weight: String
	public let preEvolutionID: Int?
	public let evolutionTree: [Evolution]
	public let altFormIDs: [Int]
	
	public init(species: String, ability1: String, ability2: String, abilityH: String, attack: Int, defense: Int, dex1: String, dex2: String, eggGroup1: String, eggGroup2: String, forme: String, height: String, hp: Int, id: Int, ndex: Int, percentFemale: Double?, percentMale: Double?, spattack: Int, spdefense: Int, name: String, speed: Int, total: Int, type: TypeCombination, weight: String, preEvolutionID: Int?, evolutionTree: [Evolution], altFormIDs: [Int]) {
		self.species = species
		self.ability1 = ability1
		self.ability2 = ability2
		self.abilityH = abilityH
		self.attack = attack
		self.defense = defense
		self.dex1 = dex1
		self.dex2 = dex2
		self.eggGroup1 = eggGroup1
		self.eggGroup2 = eggGroup2
		self.forme = forme
		self.height = height
		self.hp = hp
		self.id = id
		self.ndex = ndex
		self.percentFemale = percentFemale
		self.percentMale = percentMale
		self.spattack = spattack
		self.spdefense = spdefense
		self.name = name
		self.speed = speed
		self.total = total
		self.type = type
		self.weight = weight
		self.preEvolutionID = preEvolutionID
		self.evolutionTree = evolutionTree
		self.altFormIDs = altFormIDs
	}
	public init?(json: [String: Any]) {
		guard let species = json["class"] as? String else { print("no species"); return nil }
		guard let ability1 = json["ability1"] as? String else { print("no ability1"); return nil }
		guard let ability2 = json["ability2"] as? String else { print("no ability2"); return nil }
		guard let abilityH = json["abilityH"] as? String else { print("no abilityH"); return nil }
		guard let attack = json["attack"] as? Int else { print("no attack"); return nil }
		guard let defense = json["defense"] as? Int else { print("no defense"); return nil }
		guard let dex1 = json["dex1"] as? String else { print("no dex1"); return nil }
		guard let dex2 = json["dex2"] as? String else { print("no dex2"); return nil }
		guard let eggGroup1 = json["egg-group1"] as? String else { print("no egg group 1"); return nil }
		guard let eggGroup2 = json["egg-group2"] as? String else { print("no egg group 2"); return nil }
		guard let forme = json["forme"] as? String else { print("no forme"); return nil }
		guard let height = json["height"] as? String else { print("no height"); return nil }
		guard let hp = json["hp"] as? Int else { print("no hp"); return nil }
		guard let id = json["id"] as? Int else { print("no id"); return nil }
		guard let ndex = json["ndex"] as? Int else { print("no ndex"); return nil }
		guard let spattack = json["spattack"] as? Int else { print("no sp attack"); return nil }
		guard let spdefense = json["spdefense"] as? Int else { print("no sp defense"); return nil }
		guard let name = json["species"] as? String else { print("no species"); return nil }
		guard let speed = json["speed"] as? Int else { print("no speed"); return nil }
		guard let total = json["total"] as? Int else { print("no total stats"); return nil }
		guard let weight = json["weight"] as? String else { print("no weight"); return nil }
		guard let type1 = json["type1"] as? String else { print("no type 1"); return nil }
		guard let type2 = json["type2"] as? String else { print("no type 2"); return nil }
		guard let altFormIDs = json["altformIDs"] as? [Int] else { print("no altformIDs"); return nil }
		
		let percentFemale = json["percent-female"] as? Double
		let percentMale = json["percent-male"] as? Double
		let preEvolution = json["preEvolution"] as? Int
		let evolutionTreeIDs = json["evolutionTree"] as? [Int] ?? [Int]()
		let evolutionTree = evolutionTreeIDs.flatMap {
			Evolution.with(id: $0)
		}
		
		guard let type1Type = Type(rawValue: type1.lowercased()) else { print("Invalid type 1"); return nil }
		let type2Type = Type(rawValue: type2.lowercased())
		
		self.init(species: species, ability1: ability1, ability2: ability2, abilityH: abilityH, attack: attack, defense: defense, dex1: dex1, dex2: dex2, eggGroup1: eggGroup1, eggGroup2: eggGroup2, forme: forme, height: height, hp: hp, id: id, ndex: ndex, percentFemale: percentFemale, percentMale: percentMale, spattack: spattack, spdefense: spdefense, name: name, speed: speed, total: total, type: TypeCombination(type1Type, type2Type), weight: weight, preEvolutionID: preEvolution, evolutionTree: evolutionTree, altFormIDs: altFormIDs)
		
	}
	
	public var formName: String {
		return forme.replacingOccurrences(of: name, with: "").replacingOccurrences(of: "(", with: "").replacingOccurrences(of: ")", with: "").replacingOccurrences(of: "Forme", with: "").replacingOccurrences(of: "Form", with: "") .trimmingCharacters(in: .whitespaces).replacingOccurrences(of: "  ", with: " ")
	}
	
	public var bulbapediaURL: URL {
		return URL(string: "http://bulbapedia.bulbagarden.net/wiki/\(name)_(Pokémon)")!
	}
	
	public var icon: UIImage? {
		let formName = "\(self.formName.lowercased().replacingOccurrences(of: "forme", with: "").replacingOccurrences(of: "form", with: "").trimmingCharacters(in: .whitespacesAndNewlines).replacingOccurrences(of: " ", with: "-").replacingOccurrences(of: ":", with: "-").replacingOccurrences(of: "--", with: "-"))".replacingOccurrences(of: "é", with: "e")
		let ndexString = String(ndex)
		let iconName = (formName == "" ? ndexString : [ndexString, formName].joined(separator: "-")) + ".png"
		return UIImage(named: iconName)
	}
	
	public var hashValue: Int {
		return id
	}
	
	public static func == (lhs: Pokémon, rhs: Pokémon) -> Bool {
		return lhs.id == rhs.id
	}
	
	public static func with(id: Int) -> Pokémon? {
		guard let pokemonURL = bundle?.url(forResource: "pokemon-\(id)", withExtension: "plist"),
			let pokemonDict = [String: Any].contents(of: pokemonURL) else {
				return nil
		}
		return Pokémon(json: pokemonDict)
	}
	
}

